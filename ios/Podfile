# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Read FLUTTER_ROOT out of ios/Flutter/Generated.xcconfig
def flutter_root
  xcconfig = File.expand_path('Flutter/Generated.xcconfig', __dir__)
  unless File.exist?(xcconfig)
    raise "#{xcconfig} must exist. Run `flutter pub get` first."
  end
  File.foreach(xcconfig) do |line|
    return $1.strip if line =~ /^FLUTTER_ROOT=(.*)$/
  end
  raise "FLUTTER_ROOT not set in #{xcconfig}"
end

# Load the Flutter CocoaPods helper from the Flutter SDK:
require File.expand_path(
  File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper'),
  __FILE__
)

install! 'cocoapods', :disable_input_output_paths => true

target 'Runner' do
  # Link everything as static frameworks so Flutter/Flutter.h is always found
  use_frameworks! :linkage => :static

  # This pulls in all the pods for your plugins:
  flutter_install_all_ios_pods(__dir__)
end

post_install do |installer|
  # This is crucialâ€”lets Flutter set up all the framework search paths, etc.
  flutter_post_install(installer)

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Workaround for M1 simulator builds:
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      # Make sure every Pod builds with at least iOS 13.0:
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
    end
  end
end
