rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // âœ… Users Collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null
        && request.auth.uid == userId
        && request.resource.data.keys().hasOnly([
          'name', 'bio', 'badges', 'location', 'skills', 'interestTags'
        ]);
      allow delete: if false;
    }
    
    // âœ… Posts Collection
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.userID;
      
      // â€” Editing content/tags/timestamp (by owner)
      allow update: if request.auth != null
        && request.auth.uid == resource.data.userID
        && request.resource.data.keys().hasOnly([
          'content', 'timestamp', 'tags'
        ]);
      
      // â€” Like/Unlike (no self-likes)
      allow update: if request.auth != null
        && request.auth.uid != resource.data.userID
        && request.resource.data.keys().hasAny([
          'likes', 'likedBy'
        ]);
      
      // â€” Report post
      allow update: if request.auth != null
        && request.resource.data.keys().hasAny(['reports']);
      
      // â€” Boost (admins only)
      allow update: if request.auth != null
        && request.auth.token.admin == true
        && request.resource.data.keys().hasAny([
          'isBoosted', 'boostExpiresAt'
        ]);
      
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.userID;
      
      // ðŸš€ Helpful-marks subcollection (one per user, no self-helpful)
      match /helpfuls/{helperId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null
          && request.auth.uid == helperId
          && get(/databases/$(database)/documents/posts/$(postId))
               .data.userID != helperId;
        allow delete: if request.auth != null
          && request.auth.uid == helperId;
      }
    }
    
    // âœ… Comments
    match /posts/{postId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null
        && request.auth.uid == resource.data.userID
        && request.resource.data.keys().hasOnly([
          'content', 'timestamp'
        ]);
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.userID;
    }
    
    // âœ… Replies
    match /posts/{postId}/comments/{commentId}/replies/{replyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null
        && request.auth.uid == resource.data.userID
        && request.resource.data.keys().hasOnly([
          'content', 'timestamp'
        ]);
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.userID;
    }
    
    // âœ… Followers
    match /followers/{userId}/userFollowers/{followerId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null
        && request.auth.uid == followerId;
      allow update: if false;
    }
    
    // âœ… Reports
    match /reports/{reportId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }
    
    // âœ… Consultations
    match /consultations/{consultationId} {
      allow create, read: if request.auth != null;
    }
  }
}
